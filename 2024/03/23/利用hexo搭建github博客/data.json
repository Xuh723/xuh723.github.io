{"title":"利用hexo搭建github博客","date":"2024-03-23T10:28:50.000Z","toc":true,"source":"_posts/2024-03-23-利用hexo搭建github博客.md","raw":"---\ntitle: 利用hexo搭建github博客\ndate: 2024-03-23 18:28:50\ntags: [工程备忘]\ntoc: true\n---\n\n## 概述\n\nHexo 是个人博客框架，利用 Hexo，一方面可以用各种各样的博客主题模板搭建好看的博客，另一方面可以快速生成静态网页。然后利用 github 的发布功能生成网站，就可以简单搭建自己的个人博客。\n\n## Hexo 的安装\n\n参考 [Hexo 官方文档](https://hexo.io/zh-cn/docs/index.html)的说法，Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](http://daringfireball.net/projects/markdown/)（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 安装依赖\n\nHexo 依赖 git 和 nodeJS 两个组件。\n\n#### 安装 git\n\n直接在 [git 官网下载](https://git-scm.com/downloads)，按照说明进行安装，这里不再赘述。\n\n#### 安装 nodeJS\n\n[nodeJS 官网](https://nodejs.org/en)，下载推荐的版本。注意需要和 Hexo 的版本匹配，一般建议直接安装最新的版本。另外安装的过程中需要安装 npm，方便后续安装包括 Hexo 在内的其他 nodeJS 组件。\n\n### 安装 hexo\n\ngit 和 nodeJS 安装完成之后，可以先进行校验。在命令行输入 `git`  命令和 `node` 命令，以及 `npm` 命令查看版本，观察是否已经成功安装。如果找不到命令需要添加安装的可执行文件到 `PATH` 环境变量中。\n\n```shell\ngit version\nnode --version\nnpm --version\n```\n\n安装完成之后，需要在 npm 中安装 hexo。建议在安装之前先指定一个目录作为 npm 的全局安装目录，方便收纳这种非单一项目的安装内容。\n\n```shell\nnpm config set prefix \"<folder>\"\nnpm install -g hexo-cli\n```\n\n安装完成之后可以执行命令查看 Hexo 的版本，确认是否安装成功。\n\n```shell\nhexo --version\n```\n\n### Hexo 初始化\n\n安装完成之后，需要选择一个文件夹作为我们的工作目录。\n\n继续根据 [Hexo 官方文档](https://hexo.io/zh-cn/docs/setup)的的指引，选定目录之后对指定目录进行初始化。\n\n```shell\ncd <folder>\nhexo init\nnpm install\n```\n\n执行完成之后工作目录就初始化完毕了，之后就可以正式开始博客的搭建。\n\n## 选择主题\n\n在 [Hexo 的主题列表](https://hexo.io/themes/)中选择喜欢的博客主题，然后根据主题的介绍进行安装。不同的主题有不同的安装方式，一般在主题的 github 页面中都有详细的说明，可以根据说明进行安装。不同的主题的安装配置等都不一样，所以这里需要根据选择的主题相关的说明自行准备。\n\n## 博客配置\n\n根据 [Hexo 配置](https://hexo.io/zh-cn/docs/configuration) 文档的说明进行配置。主要是网站下的一些配置，例如 `title`，`description`，`author` 等。有些主题也有配置文件需要配置，可以根据主题的说明进行相关的其他配置。\n\n## 生成网页\n\nhexo 可以把目录生成为网页，并在本地进行测试。\n\n命令 `hexo generate`，缩写为 `hexo g` 可以生成静态网页。\n\n命令 `hexo server`，缩写为 `hexo s` 可以在本地生成网页服务器，默认情况下，访问网址为： `http://localhost:4000/`，可以观察网页的效果。\n\n命令 `hexo clean`，可以用于清除生成的静态网页。\n\n## 添加博文\n\n可以用 `hexo new <title>` 命令新建标题为 `title` 的博文，也可以在网页下的 ` resource/_post ` 目录下直接新建 `.md` 文档，并手动在开头添加 [front-matter](https://hexo.io/zh-cn/docs/front-matter)。\n\n```text\n    ---\n    title: 标题\n    date: 创建时间\n    tags: 标签\n    ---\n```\n\n如果需要更详细的介绍，可以参考官方文档 [hexo 写作](https://hexo.io/zh-cn/docs/writing)\n\n## 发布 github page\n\n有两种发布的方式，一种是[一键部署](https://hexo.io/zh-cn/docs/one-command-deployment)，只把生成的静态网页内容上传到 github。另一种是 [Hexo 上传部署](https://hexo.io/zh-cn/docs/github-pages)，上传整个目录为仓库，然后进行网页生成和发布。\n\n这里采用[一键部署](https://hexo.io/zh-cn/docs/one-command-deployment)的形式进行发布。在目录下安装 `hexo-deployer-git`。\n\n```shell\nnpm install hexo-deployer-git --save\n```\n\n首先需要在 github 上新建一个仓库，仓库名为 `<username>.github.io`，需要选择为 `public`，否则需要升级 github 会员才能发布为网页。\n\n然后，在 `_config.yml` 中添加 `deploy` 配置。\n\n```shell\ndeploy:  \n  type: git  \n  repo: <repository url> #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io  \n  branch: [branch]  \n  message: [message]\n```\n\n其中 repo 是刚才新建的仓库 URL，branch 是要提交到仓库的哪个分支，message 是提交信息，默认会带有时间信息。\n\n执行 hexo 命令来发布网页。先执行 `hexo clean` 清除之前生成的静态网页，然后执行 `hexo deploy` 或者缩写为 `hexo d`。\n\n当执行 ` hexo deploy ` 时，Hexo 会执行 ` generate `，并将 ` public ` 目录中的文件和目录推送至 ` _config.yml ` 中指定的远端仓库和分支中，并且**完全覆盖**该分支下的已有内容。\n\n此时，在 github 仓库中已经有了 hexo 生成的静态网页内容了。去 github 仓库的 Setting 页面，选择 pages，网页的 source 选择 Deploye from a branch。保存之后等待几分钟，网页就已经发布完毕了，可以通过 Visit 进行访问。\n\n至此，一个简单的博客已经搭建完毕了。\n","slug":"利用hexo搭建github博客","published":true,"updated":"2024-06-24T07:55:10.852Z","_id":"clxsp13620000igw95hvm1o4s","comments":true,"layout":"post","photos":[],"html":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Hexo 是个人博客框架，利用 Hexo，一方面可以用各种各样的博客主题模板搭建好看的博客，另一方面可以快速生成静态网页。然后利用 github 的发布功能生成网站，就可以简单搭建自己的个人博客。</p>\n<h2 id=\"Hexo-的安装\"><a href=\"#Hexo-的安装\" class=\"headerlink\" title=\"Hexo 的安装\"></a>Hexo 的安装</h2><p>参考 <a href=\"https://hexo.io/zh-cn/docs/index.html\">Hexo 官方文档</a>的说法，Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p>Hexo 依赖 git 和 nodeJS 两个组件。</p>\n<h4 id=\"安装-git\"><a href=\"#安装-git\" class=\"headerlink\" title=\"安装 git\"></a>安装 git</h4><p>直接在 <a href=\"https://git-scm.com/downloads\">git 官网下载</a>，按照说明进行安装，这里不再赘述。</p>\n<h4 id=\"安装-nodeJS\"><a href=\"#安装-nodeJS\" class=\"headerlink\" title=\"安装 nodeJS\"></a>安装 nodeJS</h4><p><a href=\"https://nodejs.org/en\">nodeJS 官网</a>，下载推荐的版本。注意需要和 Hexo 的版本匹配，一般建议直接安装最新的版本。另外安装的过程中需要安装 npm，方便后续安装包括 Hexo 在内的其他 nodeJS 组件。</p>\n<h3 id=\"安装-hexo\"><a href=\"#安装-hexo\" class=\"headerlink\" title=\"安装 hexo\"></a>安装 hexo</h3><p>git 和 nodeJS 安装完成之后，可以先进行校验。在命令行输入 <code>git</code>  命令和 <code>node</code> 命令，以及 <code>npm</code> 命令查看版本，观察是否已经成功安装。如果找不到命令需要添加安装的可执行文件到 <code>PATH</code> 环境变量中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git version</span><br><span class=\"line\">node --version</span><br><span class=\"line\">npm --version</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后，需要在 npm 中安装 hexo。建议在安装之前先指定一个目录作为 npm 的全局安装目录，方便收纳这种非单一项目的安装内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set prefix &quot;&lt;folder&gt;&quot;</span><br><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后可以执行命令查看 Hexo 的版本，确认是否安装成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hexo-初始化\"><a href=\"#Hexo-初始化\" class=\"headerlink\" title=\"Hexo 初始化\"></a>Hexo 初始化</h3><p>安装完成之后，需要选择一个文件夹作为我们的工作目录。</p>\n<p>继续根据 <a href=\"https://hexo.io/zh-cn/docs/setup\">Hexo 官方文档</a>的的指引，选定目录之后对指定目录进行初始化。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>执行完成之后工作目录就初始化完毕了，之后就可以正式开始博客的搭建。</p>\n<h2 id=\"选择主题\"><a href=\"#选择主题\" class=\"headerlink\" title=\"选择主题\"></a>选择主题</h2><p>在 <a href=\"https://hexo.io/themes/\">Hexo 的主题列表</a>中选择喜欢的博客主题，然后根据主题的介绍进行安装。不同的主题有不同的安装方式，一般在主题的 github 页面中都有详细的说明，可以根据说明进行安装。不同的主题的安装配置等都不一样，所以这里需要根据选择的主题相关的说明自行准备。</p>\n<h2 id=\"博客配置\"><a href=\"#博客配置\" class=\"headerlink\" title=\"博客配置\"></a>博客配置</h2><p>根据 <a href=\"https://hexo.io/zh-cn/docs/configuration\">Hexo 配置</a> 文档的说明进行配置。主要是网站下的一些配置，例如 <code>title</code>，<code>description</code>，<code>author</code> 等。有些主题也有配置文件需要配置，可以根据主题的说明进行相关的其他配置。</p>\n<h2 id=\"生成网页\"><a href=\"#生成网页\" class=\"headerlink\" title=\"生成网页\"></a>生成网页</h2><p>hexo 可以把目录生成为网页，并在本地进行测试。</p>\n<p>命令 <code>hexo generate</code>，缩写为 <code>hexo g</code> 可以生成静态网页。</p>\n<p>命令 <code>hexo server</code>，缩写为 <code>hexo s</code> 可以在本地生成网页服务器，默认情况下，访问网址为： <code>http://localhost:4000/</code>，可以观察网页的效果。</p>\n<p>命令 <code>hexo clean</code>，可以用于清除生成的静态网页。</p>\n<h2 id=\"添加博文\"><a href=\"#添加博文\" class=\"headerlink\" title=\"添加博文\"></a>添加博文</h2><p>可以用 <code>hexo new &lt;title&gt;</code> 命令新建标题为 <code>title</code> 的博文，也可以在网页下的 <code>resource/_post</code> 目录下直接新建 <code>.md</code> 文档，并手动在开头添加 <a href=\"https://hexo.io/zh-cn/docs/front-matter\">front-matter</a>。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标题</span><br><span class=\"line\">date: 创建时间</span><br><span class=\"line\">tags: 标签</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>如果需要更详细的介绍，可以参考官方文档 <a href=\"https://hexo.io/zh-cn/docs/writing\">hexo 写作</a></p>\n<h2 id=\"发布-github-page\"><a href=\"#发布-github-page\" class=\"headerlink\" title=\"发布 github page\"></a>发布 github page</h2><p>有两种发布的方式，一种是<a href=\"https://hexo.io/zh-cn/docs/one-command-deployment\">一键部署</a>，只把生成的静态网页内容上传到 github。另一种是 <a href=\"https://hexo.io/zh-cn/docs/github-pages\">Hexo 上传部署</a>，上传整个目录为仓库，然后进行网页生成和发布。</p>\n<p>这里采用<a href=\"https://hexo.io/zh-cn/docs/one-command-deployment\">一键部署</a>的形式进行发布。在目录下安装 <code>hexo-deployer-git</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>首先需要在 github 上新建一个仓库，仓库名为 <code>&lt;username&gt;.github.io</code>，需要选择为 <code>public</code>，否则需要升级 github 会员才能发布为网页。</p>\n<p>然后，在 <code>_config.yml</code> 中添加 <code>deploy</code> 配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:  </span><br><span class=\"line\">  type: git  </span><br><span class=\"line\">  repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io  </span><br><span class=\"line\">  branch: [branch]  </span><br><span class=\"line\">  message: [message]</span><br></pre></td></tr></table></figure>\n\n<p>其中 repo 是刚才新建的仓库 URL，branch 是要提交到仓库的哪个分支，message 是提交信息，默认会带有时间信息。</p>\n<p>执行 hexo 命令来发布网页。先执行 <code>hexo clean</code> 清除之前生成的静态网页，然后执行 <code>hexo deploy</code> 或者缩写为 <code>hexo d</code>。</p>\n<p>当执行 <code>hexo deploy</code> 时，Hexo 会执行 <code>generate</code>，并将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p>\n<p>此时，在 github 仓库中已经有了 hexo 生成的静态网页内容了。去 github 仓库的 Setting 页面，选择 pages，网页的 source 选择 Deploye from a branch。保存之后等待几分钟，网页就已经发布完毕了，可以通过 Visit 进行访问。</p>\n<p>至此，一个简单的博客已经搭建完毕了。</p>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>Hexo 是个人博客框架，利用 Hexo，一方面可以用各种各样的博客主题模板搭建好看的博客，另一方面可以快速生成静态网页。然后利用 github 的发布功能生成网站，就可以简单搭建自己的个人博客。</p>\n<h2 id=\"Hexo-的安装\"><a href=\"#Hexo-的安装\" class=\"headerlink\" title=\"Hexo 的安装\"></a>Hexo 的安装</h2><p>参考 <a href=\"https://hexo.io/zh-cn/docs/index.html\">Hexo 官方文档</a>的说法，Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><p>Hexo 依赖 git 和 nodeJS 两个组件。</p>\n<h4 id=\"安装-git\"><a href=\"#安装-git\" class=\"headerlink\" title=\"安装 git\"></a>安装 git</h4><p>直接在 <a href=\"https://git-scm.com/downloads\">git 官网下载</a>，按照说明进行安装，这里不再赘述。</p>\n<h4 id=\"安装-nodeJS\"><a href=\"#安装-nodeJS\" class=\"headerlink\" title=\"安装 nodeJS\"></a>安装 nodeJS</h4><p><a href=\"https://nodejs.org/en\">nodeJS 官网</a>，下载推荐的版本。注意需要和 Hexo 的版本匹配，一般建议直接安装最新的版本。另外安装的过程中需要安装 npm，方便后续安装包括 Hexo 在内的其他 nodeJS 组件。</p>\n<h3 id=\"安装-hexo\"><a href=\"#安装-hexo\" class=\"headerlink\" title=\"安装 hexo\"></a>安装 hexo</h3><p>git 和 nodeJS 安装完成之后，可以先进行校验。在命令行输入 <code>git</code>  命令和 <code>node</code> 命令，以及 <code>npm</code> 命令查看版本，观察是否已经成功安装。如果找不到命令需要添加安装的可执行文件到 <code>PATH</code> 环境变量中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git version</span><br><span class=\"line\">node --version</span><br><span class=\"line\">npm --version</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后，需要在 npm 中安装 hexo。建议在安装之前先指定一个目录作为 npm 的全局安装目录，方便收纳这种非单一项目的安装内容。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set prefix &quot;&lt;folder&gt;&quot;</span><br><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成之后可以执行命令查看 Hexo 的版本，确认是否安装成功。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hexo-初始化\"><a href=\"#Hexo-初始化\" class=\"headerlink\" title=\"Hexo 初始化\"></a>Hexo 初始化</h3><p>安装完成之后，需要选择一个文件夹作为我们的工作目录。</p>\n<p>继续根据 <a href=\"https://hexo.io/zh-cn/docs/setup\">Hexo 官方文档</a>的的指引，选定目录之后对指定目录进行初始化。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">hexo init</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>执行完成之后工作目录就初始化完毕了，之后就可以正式开始博客的搭建。</p>\n<h2 id=\"选择主题\"><a href=\"#选择主题\" class=\"headerlink\" title=\"选择主题\"></a>选择主题</h2><p>在 <a href=\"https://hexo.io/themes/\">Hexo 的主题列表</a>中选择喜欢的博客主题，然后根据主题的介绍进行安装。不同的主题有不同的安装方式，一般在主题的 github 页面中都有详细的说明，可以根据说明进行安装。不同的主题的安装配置等都不一样，所以这里需要根据选择的主题相关的说明自行准备。</p>\n<h2 id=\"博客配置\"><a href=\"#博客配置\" class=\"headerlink\" title=\"博客配置\"></a>博客配置</h2><p>根据 <a href=\"https://hexo.io/zh-cn/docs/configuration\">Hexo 配置</a> 文档的说明进行配置。主要是网站下的一些配置，例如 <code>title</code>，<code>description</code>，<code>author</code> 等。有些主题也有配置文件需要配置，可以根据主题的说明进行相关的其他配置。</p>\n<h2 id=\"生成网页\"><a href=\"#生成网页\" class=\"headerlink\" title=\"生成网页\"></a>生成网页</h2><p>hexo 可以把目录生成为网页，并在本地进行测试。</p>\n<p>命令 <code>hexo generate</code>，缩写为 <code>hexo g</code> 可以生成静态网页。</p>\n<p>命令 <code>hexo server</code>，缩写为 <code>hexo s</code> 可以在本地生成网页服务器，默认情况下，访问网址为： <code>http://localhost:4000/</code>，可以观察网页的效果。</p>\n<p>命令 <code>hexo clean</code>，可以用于清除生成的静态网页。</p>\n<h2 id=\"添加博文\"><a href=\"#添加博文\" class=\"headerlink\" title=\"添加博文\"></a>添加博文</h2><p>可以用 <code>hexo new &lt;title&gt;</code> 命令新建标题为 <code>title</code> 的博文，也可以在网页下的 <code>resource/_post</code> 目录下直接新建 <code>.md</code> 文档，并手动在开头添加 <a href=\"https://hexo.io/zh-cn/docs/front-matter\">front-matter</a>。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标题</span><br><span class=\"line\">date: 创建时间</span><br><span class=\"line\">tags: 标签</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>如果需要更详细的介绍，可以参考官方文档 <a href=\"https://hexo.io/zh-cn/docs/writing\">hexo 写作</a></p>\n<h2 id=\"发布-github-page\"><a href=\"#发布-github-page\" class=\"headerlink\" title=\"发布 github page\"></a>发布 github page</h2><p>有两种发布的方式，一种是<a href=\"https://hexo.io/zh-cn/docs/one-command-deployment\">一键部署</a>，只把生成的静态网页内容上传到 github。另一种是 <a href=\"https://hexo.io/zh-cn/docs/github-pages\">Hexo 上传部署</a>，上传整个目录为仓库，然后进行网页生成和发布。</p>\n<p>这里采用<a href=\"https://hexo.io/zh-cn/docs/one-command-deployment\">一键部署</a>的形式进行发布。在目录下安装 <code>hexo-deployer-git</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>首先需要在 github 上新建一个仓库，仓库名为 <code>&lt;username&gt;.github.io</code>，需要选择为 <code>public</code>，否则需要升级 github 会员才能发布为网页。</p>\n<p>然后，在 <code>_config.yml</code> 中添加 <code>deploy</code> 配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:  </span><br><span class=\"line\">  type: git  </span><br><span class=\"line\">  repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io  </span><br><span class=\"line\">  branch: [branch]  </span><br><span class=\"line\">  message: [message]</span><br></pre></td></tr></table></figure>\n\n<p>其中 repo 是刚才新建的仓库 URL，branch 是要提交到仓库的哪个分支，message 是提交信息，默认会带有时间信息。</p>\n<p>执行 hexo 命令来发布网页。先执行 <code>hexo clean</code> 清除之前生成的静态网页，然后执行 <code>hexo deploy</code> 或者缩写为 <code>hexo d</code>。</p>\n<p>当执行 <code>hexo deploy</code> 时，Hexo 会执行 <code>generate</code>，并将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p>\n<p>此时，在 github 仓库中已经有了 hexo 生成的静态网页内容了。去 github 仓库的 Setting 页面，选择 pages，网页的 source 选择 Deploye from a branch。保存之后等待几分钟，网页就已经发布完毕了，可以通过 Visit 进行访问。</p>\n<p>至此，一个简单的博客已经搭建完毕了。</p>\n","path":"2024/03/23/利用hexo搭建github博客/","permalink":"https://xuh723.github.io/2024/03/23/%E5%88%A9%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/","tags":[{"name":"工程备忘","_id":"clxsp13680002igw9bibx3ti0","slug":"工程备忘","path":"tags/工程备忘/","permalink":"https://xuh723.github.io/tags/%E5%B7%A5%E7%A8%8B%E5%A4%87%E5%BF%98/","length":1}],"categories":[],"prev":{"title":"Elastic Search集群存储和索引搜索原理简介","date":"2024-03-24T03:39:06.000Z","slug":"ES集群存储和索引搜索原理简介","published":true,"updated":"2024-04-28T08:14:46.216Z","_id":"clxsp136a0003igw9hfz04pqa","layout":"post","photos":[],"excerpt":"","path":"2024/03/24/ES集群存储和索引搜索原理简介/","permalink":"https://xuh723.github.io/2024/03/24/ES%E9%9B%86%E7%BE%A4%E5%AD%98%E5%82%A8%E5%92%8C%E7%B4%A2%E5%BC%95%E6%90%9C%E7%B4%A2%E5%8E%9F%E7%90%86%E7%AE%80%E4%BB%8B/","__post":true},"next":null,"__post":true}